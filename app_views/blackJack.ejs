<html>
  <head>
    <meta charset="UTF-8" />
    <title>Blackjack</title>
    <meta name="description" content="Sample Web tutorials for Node JS" />
    <meta name="keywords" content="NodeJS,EJS" />
    <meta name="author" content="Tanmay Sarkar" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD"
      crossorigin="anonymous"
    />
    <style>
       body {background-image: radial-gradient(circle, #5c0067 0%, #00d4ff 100%);}
      .cardInHand{
        display:flex;
        align-items:center;
        align-content:center;
        justify-content:center;
        border:solid black 5px;
        padding:10px;
        box-shadow: 10px 10px 10px black;
        border-radius: 25px;
        width: 200px;
      }
      #playerHand {
        display: flex;
        flex-direction: row;
        height: 300px;
      }
      #dealerHand{
        display: flex;
        flex-direction: row;
        height: 300px;
      }
      #buttons {
        display: flex;
        flex-direction: column;
      }
      #istructions{
        text-align: center;
      }
      .toMenu{
        margin: 0 auto;
        background-color:#B0171F;
        color:white;
        border:0px;
     }
    </style>
  </head>
  <body>
   <font color="white"> <h1 >BLACKJACK</h1>
    <h4 class="position-absolute top-50 start-50 translate-middle" id="instructions"></h4>
    <div id="game">
        <div id="buttons" class="position-absolute bottom-0 end-0">
            <p id="playerMoney"></p>  
            <button id="cardButton" class="btn btn-light toMenu" style="width:190px" onclick="player.draw()">Chiedi carta</button>
            <button id="standButton" class="btn btn-light toMenu" style="width:190px" onclick="player.stand()">Stai fermo</button>
            <button id="betButton" class="btn btn-light toMenu" style="width:190px" onclick="initialGame()">Gioca</button>
            <input type="number" id="bet"></input>
        </div>
        <div id="playerHand"class=" position-absolute bottom-0 start-50 translate-middle-x">
            <div id="cards"></div>
        </div>
        <div id="dealerHand"class=" position-absolute top-0 start-50 translate-middle-x"></div>
    </div>
    <form method="post" action="/menu">
      <button type="submit" class="btn btn-light toMenu" >TORNA AL MENÙ</button>
    </form>
    <script>
    

    function removeBetInputs() {
        var betButton = document.getElementById("betButton");
        betButton.parentNode.removeChild(betButton);

        var betInput = document.getElementById("bet");
        betInput.parentNode.removeChild(betInput);
    }
    function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }
    function addBetInputs() {
        var buttonsDiv = document.getElementById("buttons");
        var betButton = document.createElement("button");
        betButton.id = "betButton";
        betButton.onclick = initialGame;
        betButton.innerHTML = "Gioca";
        buttonsDiv.appendChild(betButton);

        var betInput = document.createElement("input");
        betInput.type = "number";
        betInput.id = "bet";
        buttonsDiv.appendChild(betInput);
    }
    
let possiblesValues_string = ["asso","due","tre","quattro","cinque","sei","sette","otto","nove","dieci","jack","regina","re"];   
    class Dealer {
        constructor(){
            this.cards = [];
        }
        checkValue(){
          let totalValue = 0;
          let possiblesValues_int = []
          let aceCounter = 0
          let values = {"asso":11,"due":2,"tre":3,"quattro":4,"cinque":5,"sei":6,"sette":7,"otto":8,"nove":9,"dieci":10,"jack":10,"regina":10,"re":10};
          this.cards.forEach(card => {
            if (card.value === "asso"){
              aceCounter++;
            }
            totalValue += values[card.value];
            
        });
          while (totalValue > 21 && aceCounter>0) {
            totalValue -= 10;
            aceCounter--;
          } 
          return totalValue;
        }
        draw() {
            let cardIndex = Math.floor(Math.random() * deck.cards.length);
            let removedCard = deck.getCard(cardIndex);
            this.cards.push(removedCard);
        }
    }
    
    let dealer = new Dealer();

    class Player {
    constructor() {
        this.cards = [];
        this.money = 100000;
        this.currentBet = 0;
    }
    checkValue(){
          let totalValue = 0;
          let possiblesValues_int = []
          let aceCounter = 0
          let values = {"asso":11,"due":2,"tre":3,"quattro":4,"cinque":5,"sei":6,"sette":7,"otto":8,"nove":9,"dieci":10,"jack":10,"regina":10,"re":10};
          this.cards.forEach(card => {
            if (card.value === "asso"){
              aceCounter++;
            }
            totalValue += values[card.value];
            
        });
          while (totalValue > 21 && aceCounter>0) {
            totalValue -= 10;
            aceCounter--;
          } 
          return totalValue;
      }
    draw() {
        if (statusOfTheGame == "CHOOSING"){
          let cardIndex = Math.floor(Math.random() * deck.cards.length);
          let removedCard = deck.getCard(cardIndex);
          this.cards.push(removedCard);
      }
      refreshData()
    }
    async aspetta() {
      await sleep(2000);
    }
    async stand(){
      if (statusOfTheGame == "CHOOSING"){
      document.getElementById("instructions").innerHTML = "ASPETTA LA MOSSA DEL TUO AVVERSARIO";
      statusOfTheGame = "WAITING"
      let valueOfPlayerCards =  this.checkValue();
      let valueOfDealerCards =  dealer.checkValue();
      if(valueOfPlayerCards>21){
          refreshData()
          daiVincite("dealer")
          document.getElementById("instructions").innerHTML = "Hai perso perché hai sballato<br>Carte dealer: "+valueOfDealerCards+"<br>Le tue carte: "+valueOfPlayerCards;
          addBetInputs();
        return
      }else if(valueOfDealerCards>21){
          refreshData()
          daiVincite("player")
          document.getElementById("instructions").innerHTML = "Hai vinto perchè il dealer ha sballato<br>Carte dealer: "+valueOfDealerCards+"<br>Le tue carte: "+valueOfPlayerCards;
          addBetInputs();
        return
      }
      while(valueOfDealerCards < 17){
        if(valueOfDealerCards < valueOfPlayerCards){
          dealer.draw();
          valueOfDealerCards =  dealer.checkValue();
          refreshData()
          await this.aspetta();
        }else{
          refreshData()
          await this.aspetta();
          break;
        }
        refreshData()  
        await this.aspetta();
      }
          addBetInputs();
        if(valueOfDealerCards>21){
          refreshData()
          daiVincite("player")
          document.getElementById("instructions").innerHTML = "Hai vinto perchè il dealer ha sballato<br>Carte dealer: "+valueOfDealerCards+"<br>Le tue carte: "+valueOfPlayerCards;
        return
      }
         if(valueOfDealerCards < valueOfPlayerCards){
          refreshData()
          await this.aspetta();
          daiVincite("player")
          document.getElementById("instructions").innerHTML = "Hai vinto per carte maggiori<br>Carte dealer: "+valueOfDealerCards+"<br>Le tue carte: "+valueOfPlayerCards;
        }else{
          refreshData()
          await this.aspetta();
          daiVincite("dealer")
          document.getElementById("instructions").innerHTML = "Hai perso per carte minori<br>Carte dealer: "+valueOfDealerCards+"<br>Le tue carte: "+valueOfPlayerCards;
        }
          refreshData();
          await this.aspetta();
      }
          refreshData()
          await this.aspetta();
    }

    play() {
        let bet = parseInt(document.getElementById("bet").value);
        if (isNaN(bet) || bet < 1){
            statusOfTheGame = "INVALID INPUT";    
        }else{
            this.currentBet = bet;
            this.money -= bet; 
            removeBetInputs();
            dealer.draw();
            dealer.draw();
            statusOfTheGame = "CHOOSING";
            refreshData();  
        }
        refreshData();
    }
}
class Card {
    constructor(value, suit) {
        this.value = value;
        this.suit = suit;
    }
}
class Deck {
    constructor() {
        let possiblesSuits = ["Cuori", "Fiori", "Quadri", "Picche"];
        
        this.possibleCards = [];
        this.cards = [];
        possiblesSuits.forEach((suit) => {
            for (let i = 0; i < possiblesValues_string.length; i++) {
                this.possibleCards.push(new Card(possiblesValues_string[i], suit));
            }
        });
        this.cards = [...this.possibleCards];
    }
    resetCards() {
        this.cards = [...this.possibleCards];
    }
    getCard(index) {
        let removedCard = this.cards[index];
        this.cards.splice(index, 1);
        return removedCard;
    }
}

let deck = new Deck();
let player = new Player();

let statusOfTheGame = "BETTING";
refreshData();

function daiVincite(vincitore) {
  if (vincitore === "player"){
    if (player.checkValue() == 21){
      player.money += player.currentBet + ((player.currentBet) * (3/2))
      player.currentBet = 0;
      player.cards = [];
      dealer.cards = [];
      refreshData();
    }else{
      player.money += player.currentBet * 2 ;
      player.cards = [];
      dealer.cards = [];
      refreshData();
    }
  }else if (vincitore === "dealer"){
    player.cards = [];
    dealer.cards = [];
    deck.resetCards()
    refreshData();
    return;
  }
  
  refreshData();
  deck.resetCards()
}
function generateCards() {
    let dealerHand = document.getElementById("dealerHand");
    dealerHand.innerHTML = "";
    dealer.cards.forEach(card => {
      let cardDiv = document.createElement("div");
      cardDiv.setAttribute("class", "cardInHand");
      cardDiv.style.backgroundImage = "url(/images/"+card.value+"Di"+card.suit+".jpg)"
      cardDiv.style.backgroundSize = "190px 290px"
      dealerHand.appendChild(cardDiv);
    });

    let playerHand = document.getElementById("playerHand");
    playerHand.innerHTML = "";
    player.cards.forEach(card => {
      let cardDiv = document.createElement("div");
      cardDiv.setAttribute("class", "cardInHand");
      cardDiv.style.backgroundImage = "url(/images/"+card.value+"Di"+card.suit+".jpg)"
      cardDiv.style.backgroundSize = "190px 290px"
      playerHand.appendChild(cardDiv);
    });
}
      function initialGame(){
        player.play()
        player.draw()
        player.draw()
        refreshData();
      }
function refreshData() {
    document.getElementById("playerMoney").innerHTML = "Total money: " + player.money;
    generateCards()

    if (statusOfTheGame === "BETTING") {
        document.getElementById("instructions").innerHTML = "INSERISCI LE FISH E PREMI IL PULSANTE 'GIOCA'";
    } else if (statusOfTheGame === "CHOOSING") {
        document.getElementById("instructions").innerHTML = "SCEGLI SE: CHIEDERE UNA CARTA O STARE FERMO";
    } else if (statusOfTheGame === "INVALID INPUT"){
        document.getElementById("instructions").innerHTML = "HAI INSERITO UN VALORE ERRATO DI FICHES";
    }
}
    </script>
  </body>
</html>